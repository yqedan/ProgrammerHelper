[
  {
    "topicTitle":"Java",
    "triviaQuestions":[
      {
        "question": "Objects are stored on the stack.",
        "choices":[
          "True",
          "False"
        ],
        "answer": 1,
        "explanation": "Objects are allocated memory in heap memory space.",
        "shuffleChoices": false
      },
      {
        "question": "What is the size of a short variable?",
        "choices":[
          "8 bit",
          "16 bit",
          "32 bit",
          "64 bit"
        ],
        "answer": 1,
        "explanation": "The short data type is represented by 16-bit signed two's complement integer",
        "shuffleChoices": true
      },
      {
        "question": "What is the default value of a short variable?",
        "choices":[
          "0.0",
          "0",
          "null",
          "not defined"
        ],
        "answer": 1,
        "explanation": "A short variable has default value of 0 if defined as an instance or static variable.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following is true about public access modifier?",
        "choices":[
          "Variables, methods and constructors which are declared public can be accessed by any class.",
          "Variables, methods and constructors which are declared public can be accessed by any class lying in same package.",
          "Variables, methods and constructors which are declared public in the superclass can be accessed only by its child class.",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "Public access modifier is used to make variables, methods and constructors accessible to any class.",
        "shuffleChoices": false
      },
      {
        "question": "What is an immutable object?",
        "choices":[
          "An immutable object can be changed once it is created.",
          "An immutable object can't be changed once it is created.",
          "An immutable object is an instance of an abstract class.",
          "None of the above."
        ],
        "answer": 1,
        "explanation": "An immutable object can't be changed once it is created. String objects are immutable.",
        "shuffleChoices": false
      },
      {
        "question": "What is the JRE?",
        "choices":[
          "JRE is a Java based GUI application.",
          "JRE is an application development framework.",
          "JRE is an implementation of the Java Virtual Machine which executes Java programs.",
          "None of the above."
        ],
        "answer": 2,
        "explanation": "Java Runtime Environment is an implementation of the Java Virtual Machine which executes Java programs. It provides the minimum requirements for executing a Java application.",
        "shuffleChoices": false
      },
      {
        "question": "Method Overriding is an example of",
        "choices":[
          "Static Binding.",
          "Dynamic Binding.",
          "Both of the above.",
          "None of the above."
        ],
        "answer": 1,
        "explanation": "Method Overriding is an example of dynamic Binding.",
        "shuffleChoices": false
      },
      {
        "question": "What is synchronization?",
        "choices":[
          "Synchronization is the capability to control the access of multiple threads to shared resources.",
          "Synchronization is the process of writing the state of an object to another object.",
          "Synchronization is the process of writing the state of an object to byte stream.",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "Synchronization is the capability to control the access of multiple threads to shared resources. The synchronized keyword in Java provides locking which ensures mutual exclusive access of shared resource and prevent data race.",
        "shuffleChoices": false
      },
      {
        "question": "Can try statements be nested?",
        "choices":[
          "True",
          "False"
        ],
        "answer": 0,
        "explanation": "Yes, try statements can be nested.",
        "shuffleChoices": false
      },
      {
        "question": "Which of the following is a marker interface?",
        "choices":[
          "serializable",
          "comparable",
          "cloneable",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "Serializable is a marker interface.",
        "shuffleChoices": false
      },
      {
        "question": "What is the size of byte variable?",
        "choices":[
          "8 bit",
          "16 bit",
          "32 bit",
          "64 bit"
        ],
        "answer": 0,
        "explanation": "The byte data type is represented by an 8-bit signed two's complement integer.\nMinimum value: -128\nMaximum value: 127",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following is true about private access modifier?",
        "choices":[
          "Variables, methods and constructors which are declared private can be accessed only by the members of the same class.",
          "Variables, methods and constructors which are declared private can be accessed by any class lying in same package.",
          "Variables, methods and constructors which are declared private in the superclass can be accessed only by its child class.",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "Private access modifier is used to restrict access to variables, methods and constructors to member of same class only.",
        "shuffleChoices": false
      },
      {
        "question": "What is local variable?",
        "choices":[
          "Variables defined inside methods, constructors or blocks are called local variables.",
          "Variables defined outside methods, constructors or blocks are called local variables.",
          "Static variables defined outside methods, constructors or blocks are called local variables.",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and it will be destroyed when the method has completed.",
        "shuffleChoices": false
      },
      {
        "question": "What is Serialization?",
        "choices":[
          "Serialization is the process of writing the state of an object to another object.",
          "Serialization is the process of writing the state of an object to a byte stream.",
          "Both of the above.",
          "None of the above."
        ],
        "answer": 1,
        "explanation": "Serialization is the process of writing the state of an object to a byte stream.",
        "shuffleChoices": false
      },
      {
        "question": "Which arithmetic operations can result in the throwing of an ArithmeticException?",
        "choices":[
          "/ , %",
          "* , +",
          "! , -",
          ">>, <<"
        ],
        "answer": 0,
        "explanation": "Integer / and % can result in the throwing of an ArithmeticException.",
        "shuffleChoices": true
      },
      {
        "question": "Static functions can be accessed using null reference.",
        "choices":[
          "True",
          "False"
        ],
        "answer": 0,
        "explanation": "True, Static functions can be accessed via class name or via null reference.",
        "shuffleChoices": false
      },
      {
        "question": "What invokes a thread's run() method?",
        "choices":[
          "JVM invokes the thread's run() method when the thread is initially executed.",
          "Main application running the thread.",
          "start() method of the thread class.",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "After a thread is started, via its start() method of the Thread class, the JVM invokes the thread's run() method when the thread is initially executed.",
        "shuffleChoices": false
      }
    ],
    "flashcards":[
      {
        "question":"What’s the purpose of Static methods and static variables?",
        "answer":"When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects."
      },
      {
        "question":"What are the various access specifiers for Java classes?",
        "answer":"In Java, access specifiers are the keywords used before a class name which defines the access scope. The types of access specifiers for classes are:\n1. Public : Class,Method,Field is accessible from anywhere.\n2. Protected:Method,Field can be accessed from the same class to which they belong or from the sub-classes,and from the class of same package,but not from outside.\n3. Default: Method,Field,class can be accessed only from the same package and not from outside of it’s native package.\n4. Private: Method,Field can be accessed from the same class to which they belong."
      },
      {
        "question":"What is data encapsulation and what’s its significance?",
        "answer":"Encapsulation is a concept in Object Oriented Programming for combining properties and methods in a single unit. Encapsulation helps programmers to follow a modular approach for software development as each object has its own set of methods and variables and serves its functions independent of other objects. Encapsulation also serves data hiding purpose."
      },
      {
        "question":"What is the difference between continue and break statement?",
        "answer":"Break and continue are two important keywords used in Loops. When the break keyword is used in a loop the execution block is broken and the loop is not itereated any further, when the continue keyword is used the current iteration is broken and loop continues with next iteration if the loop condition passes."
      },
      {
        "question":"What is the difference between double and float variables in Java?",
        "answer":"In Java, float takes 4 bytes in memory while double takes 8 bytes in memory. Float is single precision floating point decimal number while double is double precision decimal number."
      },
      {
        "question":"What’s the base class in Java from which all classes are derived?",
        "answer":"Java.lang.object"
      },
      {
        "question":"What’s the difference between an Abstract Class and Interface in Java?",
        "answer":"The primary difference between an abstract class and interface is that an interface can only possess declaration of public static methods with no concrete implementation while an abstract class can have members with any access specifiers (public, private etc) with or without concrete implementation. Another key difference is that a class which implements an interface must implement all the methods of the interface while a class which inherits from an abstract class only requires implementation of abstract the methods of its super class. A class can implement multiple interfaces but it can extend only one abstract class."
      },
      {
        "question":"How can we pass argument to a function by reference instead of pass by value?",
        "answer":"In Java, we can pass argument to a function only by value and not by reference."
      },
      {
        "question":"Is it compulsory for a Try Block to be followed by a Catch Block in Java for Exception handling?",
        "answer":"Try block needs to be followed by either Catch block or Finally block or both. Any exception thrown from try block needs to be either caught in the catch block or else any specific tasks to be performed before code abortion are put in the Finally block."
      },
      {
        "question":"Can we override static methods of a class?",
        "answer":"We cannot override static methods. Static methods belong to a class and not to individual objects and are resolved at the time of compilation (not at runtime).Even if we try to override static method, we will not get an complitaion error,nor the impact of overriding when running the code."
      },
      {
        "question":"What is multi-threading?",
        "answer":"Multi threading is a programming concept to run multiple tasks in a concurrent manner within a single program. Threads share same process stack and running in parallel. It  helps  in performance improvement of any program."
      },
      {
        "question":"How is garbage collection done in Java?",
        "answer":"In Java, when an object is not referenced any more, garbage collection takes place and the object is destroyed automatically. For automatic garbage collection Java calls either System.gc() method or Runtime.gc() method."
      },
      {
        "question":"Can we call the constructor of a class more than once for an object?",
        "answer":"Constructor is called automatically when we create an object using new keyword. It’s called only once for an object at the time of object creation and hence, we can’t invoke the constructor again for an object after its creation."
      },
      {
        "question":"Can a variable be local and static at the same time?",
        "answer":"No a variable can’t be static as well as local at the same time. Defining a local variable as static gives compilation error."
      },
      {
        "question":"What’s the difference between comparison done by equals method and == operator?",
        "answer":"In Java, equals() method is used to compare the contents of two string objects and returns true if the two have same value while == operator compares the references of two string objects."
      },
      {
        "question":"Can a class in Java be inherited from more than one class?",
        "answer":"In Java, a class can be derived from only one class and not from multiple classes. Multiple inheritances is not supported by Java."
      },
      {
        "question":"Can variables be used in Java without initialization?",
        "answer":"In Java, if a variable is used in a code without prior initialization by a valid value, program doesn’t compile and gives an error as no default value is assigned to variables in Java."
      },
      {
        "question":"Can we call a non-static method from inside a static method?",
        "answer":"Non-Static methods are owned by objects of a class and have object level scope and in order to call the non-Static methods from a static block (like from a static main method), an object of the class needs to be created first. Then using object reference, these methods can be invoked."
      },
      {
        "question":"Can we use a default constructor of a class even if an explicit constructor is defined?",
        "answer":"Java provides a default no argument constructor if no explicit constructor is defined in a Java class. But if an explicit constructor has been defined, default constructor can’t be invoked and developer can use only those constructors which are defined in the class."
      },
      {
        "question":" How can we use primitive data types as objects?",
        "answer":"Primitive data types like int can be handled as objects by the use of their respective wrapper classes. For example, Integer is a wrapper class for primitive data type int. We can apply different methods to a wrapper class, just like any other object."
      },
      {
        "question":"What is the benefit of using inheritance?",
        "answer":"The key benefit of using inheritance is reusability of code as inheritance enables sub-classes to reuse the code of its super class. Polymorphism (Extensibility ) is another great benefit which allows new functionality to be introduced without effecting existing derived classes."
      },
      {
        "question":"What is the difference between an Inner Class and a Sub-Class?",
        "answer":" An Inner class is a class which is nested within another class. An Inner class has access rights for the class which is nesting it and it can access all variables and methods defined in the outer class. A sub-class is a class which inherits from another class called super class. Sub-class can access all public and protected methods and fields of its super class."
      },
      {
        "question":"What is a singleton class? Give a practical example of its usage.",
        "answer":"A singleton class in Java can have only one instance and hence all its methods and variables belong to just one instance. Singleton class concept is useful for the situations when there is a need to limit the number of objects for a class. The best example of singleton usage scenario is when there is a limit of having only one connection to a database due to some driver limitations or because of any licensing issues."
      },
      {
        "question":"What is an infinite Loop? How is an infinite loop declared?",
        "answer":"An infinite loop runs without any condition and runs infinitely. An infinite loop can be broken by defining any breaking logic in the body of the statement blocks.\nIt is implemented as follows:\n\nfor (;;){\n//loop body\n}"
      },
      {
        "question":"What is final Keyword in Java?",
        "answer":" In Java a constant is declared using the keyword final. The value of a final can only be assigned only once and the value of a constant can’t be changed."
      },
      {
        "question":"Can the main() method in Java can return any data?",
        "answer":"In Java, the main() method can’t return any data and hence, it’s always declared with a void return type."
      },
      {
        "question":"Can we declare a class as Abstract without having any abstract method?",
        "answer":"Yes we can create an abstract class by using abstract keyword before class name even if it doesn’t have any abstract method. However, if a class has even one abstract method, it must be declared as abstract otherwise it will give an error."
      },
      {
        "question":"Can a class have multiple constructors?",
        "answer":"Yes, a class can have multiple constructors with different parameters. Which constructor gets used for object creation depends on the arguments passed while creating the objects."
      },
      {
        "question":"How are objects stored in Java?",
        "answer":"In Java, when each object is created, memory is allocated from the heap. When an object is destroyed by the garbage collector the space allocated to it is re-allocated to the heap and becomes available for any new objects."
      },
      {
        "question":"How can we find the actual size of an object on the heap?",
        "answer":" In java, there is no way to find out the exact size of an object on the heap."
      },
      {
        "question":"I have multiple constructors defined in a class. Is it possible to call a constructor from another constructor’s body?",
        "answer":"If a class has multiple constructors, it’s possible to call one constructor from the body of another one using this()"
      },
      {
        "question":"What’s the base class of all exception classes?",
        "answer":"In Java, Java.Lang.throwable is the super class of all exception classes and all exception classes are derived from this base class."
      },
      {
        "question":"Can we cast any other type to boolean Type with type casting?",
        "answer":"No, we can neither cast any other primitive type to boolean data type nor can cast boolean data type to any other primitive data type."
      }
    ]
  },
  {
    "topicTitle":"JavaScript",
    "triviaQuestions":[
      {
        "question": "Which of the following is true about variable naming conventions in JavaScript?",
        "choices":[
          "You should not use any of the JavaScript reserved keyword as variable name.",
          "JavaScript variable names should not start with a numeral (0-9).",
          "Both of the above.",
          "None of the above."
        ],
        "answer": 2,
        "explanation": "Both of the above options are correct.",
        "shuffleChoices": false
      },
      {
        "question": "Which of the following is the correct syntax to redirect a url using JavaScript?",
        "choices":[
          "document.location='http://www.newlocation.com';",
          "browser.location='http://www.newlocation.com';",
          "navigator.location='http://www.newlocation.com';",
          "window.location='http://www.newlocation.com';"
        ],
        "answer": 3,
        "explanation": "window.location='http://www.newlocation.com'; is the correct option.",
        "shuffleChoices": true
      },
      {
        "question": "Which built-in method calls a function for each element in the array?",
        "choices":[
          "while()",
          "loop()",
          "forEach()",
          "None of the above."
        ],
        "answer": 2,
        "explanation": "forEach() method calls a function for each element in the array.",
        "shuffleChoices": false
      },
      {
        "question": "Which built-in method returns the calling string value converted to lower case?",
        "choices":[
          "toLowerCase()",
          "toLower()",
          "changeCase(case)",
          "None of the above."
        ],
        "answer": 0,
        "explanation": "toLowerCase() method returns the calling string value converted to lower case.",
        "shuffleChoices": false
      },
      {
        "question": "Which of the following function of Number object defines how many total digits to display of a number?",
        "choices":[
          "toExponential()",
          "toFixed()",
          "toLocaleString()",
          "toPrecision()"
        ],
        "answer": 3,
        "explanation": "toPrecision() − Defines how many total digits (including digits to the left and right of the decimal) to display of a number.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following function of String object returns the index within the calling String object of the first occurrence of the specified value?",
        "choices":[
          "substr()",
          "search()",
          "lastIndexOf()",
          "indexOf()"
        ],
        "answer": 3,
        "explanation": "indexOf() − Returns the index within the calling String object of the first occurrence of the specified value, or -1 if not found.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following function of String object returns the calling string value converted to lower case?",
        "choices":[
          "toLocaleLowerCase()",
          "toLowerCase()",
          "toString()",
          "substring()"
        ],
        "answer": 1,
        "explanation": "toLowerCase() − Returns the calling string value converted to lower case.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following function of String object creates an HTML hypertext link that requests another URL?",
        "choices":[
          "link()",
          "sub()",
          "sup()",
          "small()"
        ],
        "answer": 0,
        "explanation": "link() − Creates an HTML hypertext link that requests another URL.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following function of Array object applies a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value?",
        "choices":[
          "pop()",
          "push()",
          "reduce()",
          "reduceRight()"
        ],
        "answer": 2,
        "explanation": "reduce() − Applies a function simultaneously against two values of the array (from left-to-right) as to reduce it to a single value.",
        "shuffleChoices": true
      },
      {
        "question": "Which of the following function of Array object extracts a section of an array and returns a new array?",
        "choices":[
          "reverse()",
          "shift()",
          "slice()",
          "some()"
        ],
        "answer": 2,
        "explanation": "Which of the following function of Array object extracts a section of an array and returns a new array?",
        "shuffleChoices": true
      }
    ],
    "flashcards":[
      {
        "question":"What is JavaScript?",
        "answer":"JavaScript is a client-side as well as server side scripting language that can be inserted into HTML pages and is understood by web browsers. JavaScript is also an Object Oriented Programming language"
      },
      {
        "question":"What are JavaScript types?",
        "answer":"Number, String, Boolean, Function, Object, Null, Undefined"
      },
      {
        "question":"What is the purpose of the \"this\" keyword in JavaScript?",
        "answer":"The \"this\" keyword references the object instance that the member function or prototype was called on or the instance created by the constructor."
      },
      {
        "question":"What is === operator?",
        "answer":"The === operator is called as strict equality operator which returns true when the two operands are having the same value without any type conversion."
      },
      {
        "question":"What are global variables? How are these variables declared and what are the problems associated with using them?",
        "answer":"Global variables are those that are available throughout the length of the code, that is, these have no scope. The var keyword is used to declare a local variable or object. If the var keyword is omitted, a global variable is declared.\nThe problems that are faced by using global variables are the clash of variable names of local and global scope. Also, it is difficult to debug and test the code that relies on global variables."
      },
      {
        "question":"What would be the result of 3+2+”7″?",
        "answer":"Since 3 and 2 are integers, they will be added numerically. And since 7 is a string, its concatenation will be done. So the result would be 57."
      },
      {
        "question":"What does the value null mean in JavaScript?",
        "answer":"The null value is used to represent no value or no object.  It implies no object or null string, no valid boolean value, no number and no array object."
      },
      {
        "question":"What is an undefined value in JavaScript?",
        "answer":"Undefined value means the\nVariable used in the code doesn’t exist\nVariable is not assigned to any value\nProperty doesn’t exist"
      },
      {
        "question":"Explain what is pop() method in JavaScript?",
        "answer":"The pop() method takes the last element off of the given array and returns it. The array on which is called is then altered."
      },
      {
        "question":"What is the use of typeof operator?",
        "answer":"\"typeof\" is an operator which is used to return a string description of the type of a variable."
      },
      {
        "question":"How are object properties assigned?",
        "answer":"Properties are assigned to objects in the following way:\nobj[\"class\"] = 12;\nobj.class = 12;"
      },
      {
        "question":"Is JavaScript case sensitive? Give an example?",
        "answer":"Yes, JavaScript is case sensitive. For example, a function parseInt is not same as the function Parseint."
      },
      {
        "question":"How are event handlers utilized in JavaScript?",
        "answer":"Events are the actions that result from activities, such as clicking a link or filling a form, by the user. An event handler is required to manage proper execution of all these events. Event handlers are an extra attribute of the object. This attribute includes event’s name and the action taken if the event takes place."
      },
      {
        "question":"Where can we download jQuery?",
        "answer":"jQuery JavaScript can be downloaded from jQuery official website – www.jquery.com"
      },
      {
        "question":"What are the advantages of jQuery?",
        "answer":"jQuery can be written along with JavaScript\nCoding is simple, clear, reusable\nRemoval of writing more complex conditions and loops"
      },
      {
        "question":"What is the use of jQuery each function?",
        "answer":"jQuery each function is used to loop through each and every element of the target jQuery object."
      },
      {
        "question":"What is the advantage of using minimized version of jQuery?",
        "answer":"Efficiency of web page increases when minimized version of jQuery is used.min.js file will be more than 50% less than the normal js file. Reduction in the file size makes the web page faster."
      }
    ]
  },
  {
    "topicTitle":"PHP",
    "triviaQuestions":null,
    "flashcards":[
      {
        "question":"How can we display the output directly to the browser?",
        "answer":"To be able to display the output directly to the browser, we have to use the special tags <?= and ?>."
      },
      {
        "question":"How comparison of objects is done in PHP5?",
        "answer":"We use the operator ‘==’ to test is two object are instanced from the same class and have same attributes and equal values. We can test if two object are refering to the same instance of the same class by the use of the identity operator ‘===’."
      },
      {
        "question":"Is multiple inheritance supported in PHP?",
        "answer":"PHP includes only single inheritance, it means that a class can be extended from only one single class using the keyword ‘extended’."
      },
      {
        "question":"How can we display the output directly to the browser?",
        "answer":"To be able to display the output directly to the browser, we have to use the special tags <?= and ?>."
      },
      {
        "question":"How can we display information of a variable and readable by human with PHP?",
        "answer":"To be able to display a human-readable result we use print_r()."
      },
      {
        "question":"How can PHP and Javascript interact?",
        "answer":"PHP and Javascript cannot directly interacts since PHP is a server side language and Javascript is a client side language. However we can exchange variables since PHP is able to generate Javascript code to be executed by the browser and it is possible to pass specific variables back to PHP via the URL."
      },
      {
        "question":"How can we check the value of a given variable is a number?",
        "answer":"It is possible to use the dedicated function, is_numeric() to check whether it is a number or not."
      },
      {
        "question":"How is a constant defined in a PHP?",
        "answer":"The define() directive lets us declare a constant as follows:\n\ndefine(“ACONSTANT”, 123);"
      },
      {
        "question":"How is the ternary conditional operator used in PHP?",
        "answer":"It is composed of three expressions: a condition, and two operands describing what instruction should be performed when the specified condition is true or false as follows:\n\nExpression_1 ? Expression_2 : Expression_3;"
      },
      {
        "question":"Are objects passed by value or by reference in PHP?",
        "answer":"In PHP, objects passed by value."
      },
      {
        "question":"What are the two main string operators?",
        "answer":"The first is the concatenation operator (‘.’), which returns the concatenation of its right and left arguments.\n\nThe second is (‘.=’), which appends the argument on the right to the argument on the left."
      },
      {
        "question":"How can we determine whether a PHP variable is an instantiated object of a certain class?",
        "answer":"To be able to verify whether a PHP variable is an instantiated object of a certain class we use instanceof."
      },
      {
        "question":"What is the goto statement useful for?",
        "answer":"The goto statement can be placed to enable jumping inside the PHP program. The target is pointed by a label followed by a colon, and the instruction is specified as a goto statement followed by the desired target label."
      },
      {
        "question":"What does the expression Exception::__toString means?",
        "answer":"Exception::__toString gives the String representation of the exception."
      },
      {
        "question":"What are the three classes of errors that can occur in PHP?",
        "answer":"The three basic classes of errors are notices (non-critical), warnings (serious errors) and fatal errors (critical errors)."
      },
      {
        "question":"Is it possible to extend the execution time of a php script?",
        "answer":"The use of the set_time_limit(int seconds) enables us to extend the execution time of a php script. The default limit is 30 seconds."
      },
      {
        "question":"Is it possible to destroy a cookie?",
        "answer":"Yes, it is possible by setting the cookie with a past expiration time."
      }
    ]
  },
  {
    "topicTitle":"Spark",
    "triviaQuestions":null,
    "flashcards":[
      {
        "question":"How does Spark use Hadoop?",
        "answer":"Spark has its own cluster management computation and mainly uses Hadoop for storage."
      },
      {
        "question":"What is an RDD?",
        "answer":"1. RDDs (Resilient Distributed Datasets) are a basic abstraction in Apache Spark that represent the data coming into the system in object format.\n2. RDDs are used for in-memory computations on large clusters, in a fault tolerant manner.\n3. RDDs are read-only and partitioned collection of records that are immutable and resilient.\n4. RDDs are basically parts of data that are stored in the memory distributed across many nodes.\n5. RDDs are lazily evaluated in Spark. This lazy evaluation is what contributes to Spark’s speed."
      },
      {
        "question":"What are Spark Transformations?",
        "answer":"Transformations are functions executed on demand, to produce a new RDD or DataFrame. All transformations are followed by actions. Some examples of transformations include map(), filter() and spark.sql() queries."
      },
      {
        "question":"What are Spark Actions?",
        "answer":"Actions are the results of RDD/DataFrame computations or transformations. After an action is performed, the data from RDD/DataFrame moves back to the local machine. Some examples of actions include reduce(), collect(), first(), show(), count(), and take()."
      },
      {
        "question":"Spark is lazy evaluated, explain this concept.",
        "answer":"When you tell Spark to operate on a given dataset it makes a note of the instructions but it does nothing until asked for the final result. Transformations in Spark like map() are not evaluated until you perform an action like show(). This helps optimize the overall data processing workflow."
      },
      {
        "question":"What is the default level of parallelism in apache spark?",
        "answer":"If the user does not explicitly specify then the number of partitions is used as default."
      },
      {
        "question":"What is Apache Spark?",
        "answer":"Apache Spark is an open-source cluster computing framework for real-time processing. It provides an interface for programming entire clusters with implicit data parallelism and fault-tolerance. It also supports in-memory processing."
      },
      {
        "question":"What are benefits of Spark over MapReduce?",
        "answer":"1. Due to the availability of in-memory processing, Spark implements the processing around 10 to 100 times faster than Hadoop MapReduce whereas MapReduce makes use of persistence storage for any of the data processing tasks.\n 2. Unlike Hadoop, Spark provides inbuilt libraries to perform multiple tasks from the same core like batch processing, Steaming, Machine learning, Interactive SQL queries. However, Hadoop only supports batch processing.\n 3. Hadoop is highly disk-dependent whereas Spark promotes caching and in-memory data storage.\n 4. Spark is capable of performing computations multiple times on the same dataset. This is called iterative computation while there is no iterative computing implemented by Hadoop."
      },
      {
        "question":"What is YARN?",
        "answer":"Similar to Hadoop, YARN is one of the key features in Spark, providing a central and resource management platform to deliver scalable operations across the cluster. YARN is a distributed container manager, like Mesos for example, whereas Spark is a data processing tool. Spark can run on YARN, the same way Hadoop Map Reduce can run on YARN. Running Spark on YARN necessitates a binary distribution of Spark as built on YARN support."
      },
      {
        "question":"What is Executor Memory?",
        "answer":"Every Spark application has same fixed heap size and fixed number of cores for a spark executor. The heap size is what referred to as the Spark executor memory which is controlled with the spark.executor.memory property or the –executor-memory flag. Every spark application will have at least one executor on each worker node. The executor memory is basically a measure on how much memory of the worker node will the application utilize."
      },
      {
        "question":"What is Driver Memory?",
        "answer":"Amount of memory to use for the driver process, i.e. where SparkContext is initialized. Only one driver JVM is created."
      }
    ]
  }
]
